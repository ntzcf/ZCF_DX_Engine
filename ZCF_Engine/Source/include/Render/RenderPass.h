#pragma once

#include "d3dUtil.h"
#include "Scene/SceneManager.h"
#include "Buffer.h"

namespace Engine::Render::renderpass
{
	class resource::RenderResourceManager;

	///////////////////////////////////////////////////////PSO
	//		//									ALL_My_Buffer_Resource
	//	//									Graphics
	//std::vector<Buffer::V_I_Buffer>					V_I_Buffers;
	//std::vector<Buffer::InstanceBuffer>				InstanceBuffers;
	////								Texture	+	Constant  ------- Bindless
	//std::vector<Buffer::ConstantBuffer>				ConstantBuffers;
	//std::vector<Buffer::Texture>					Textures;
	////									Compute
	//std::vector<Buffer::UAV_Buffer>					ComputeBuffers;


	struct  RootSignature
	{


	};
	struct Shader
	{
		std::string		ShaderPath;
		std::string		ShaderVersion;
		std::string		ShaderMain;
		//使用时候注意;用	string.c_str()	转换
		uint16_t		ShaderFlags1;
		uint16_t		ShaderFlags2;
	};

	struct PSO
	{
		Shader				shader;
		RootSignature		RS;
	};
	/// <summary>
	/// //////////////////////////////////////////////////////////////Resource
	/// </summary>
	


	struct ResourceInfo
	{
		std::string								name;
		
		resource::Buffer::ResourceFormat		Foramt;
		resource::Buffer::ResourceType			Type;

		uint32_t								Width;
		uint32_t								Height;

		bool									Frames;
	};

	/// <summary>
	/// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// </summary>

	class Pass_Mat_Info
	{
	public:
		Pass_Mat_Info() {};
		~Pass_Mat_Info() {};

		//	Collect主要负责收集DESC的部分,填写?
		virtual void PassCollectBegin();//设置各种信号,log等,便于调试
		virtual void PassCollect();//特化版:这里写假设啥的      普通版:无视这个,基本全要自己写,没什么假设
		virtual void PassCollectEnd();//同Begin

		virtual void PassExcuteBegin();
		virtual void PassExcute();
		virtual void PassExcuteEnd();

	public:
		//std::string				Pname;//	Pass
		//std::string				Mname;//	Material

		//bool						isCompute/isGraphics;
		
		//	Setting?
		//			PSO
		//  Input		Data		&		Attribute   : 
		//	Output		Buffer		Attribute:	Name , Type , Format , Size , ............
		//	Queue Type

		//								PiplineState
		//	形参:PSO
		//	RootSignature	:view形参个数,种类
		//	Shader:		name,	code,	版本
		//	StreamOutput	流输出
		//	BlendState
		//	SampleMask
		//	RasterizerState
		//	DepthStencilState
		//	InputLayout
		//	TopologyType
		//	NumRenderTargets
		//	RTV Formats[8]
		//	DSV Format
		//	SampleDesc
		//	以上这么多的玩意儿,还可以进n步细分,假设,合并:最终优化剩下的才是需要的该Pass形参信息.

		//							In/Out Buffer,Texture
		//							Resource In CPU
		//							Resource Type, Format,	Usage In Pass
		//							

		//							lamda回调函数


		//无论形参,实参都是有动态收集部分,和假设,自动部分

	};
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	class DepthPassInfo : public Pass_Mat_Info
	{
		DepthPassInfo() {};
		~DepthPassInfo() {};

	public:
		std::string				Pname;
		std::string				Mname;

		std::function<void(Microsoft::WRL::ComPtr<ID3D12GraphicsCommandList>,
			resource::RenderResourceManager,
			Microsoft::WRL::ComPtr<ID3D12Device>)>				Lamda;
		//		Queue
		bool					isGraphics;
		//		PSO
		PSO						PSO;
		//		Resource
		//			VBV			IBV			Position Stream			Index Stream
		//								或者直接变成Instance Stream?
		std::unordered_map<resource::Buffer::ResourceInfoUsage, resource::Buffer::VertexBuffer>				Vertex_Attribute_Stream;
		std::unordered_map<resource::Buffer::ResourceInfoUsage, resource::Buffer::IndexBuffer>				IndexBuffer;
		
	};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class GBufferPassInfo : public Pass_Mat_Info
	{
	public:
		GBufferPassInfo() {};
		~GBufferPassInfo() {};

		std::string				Pname;
		std::string				Mname;

		std::function<void(Microsoft::WRL::ComPtr<ID3D12GraphicsCommandList>,
			resource::RenderResourceManager,
			Microsoft::WRL::ComPtr<ID3D12Device>)>				Lamda;

		bool					isGraphics;

		//				Position		Normal		Tangent?		UV0			UV1		..............
		std::unordered_map<resource::Buffer::ResourceInfoUsage, resource::Buffer::VertexBuffer>				Vertex_Attribute_Steam;
		std::unordered_map<resource::Buffer::ResourceInfoUsage, resource::Buffer::IndexBuffer>				IndexBuffer;
		//				GBuffer1		GBuffer2		GBuffer3		GBuffer4		GBuffer5
		std::unordered_map<resource::Buffer::ResourceInfoUsage, ResourceInfo>								ResourceInofs;

	};
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class LightingPassInfo : public Pass_Mat_Info
	{
	public:
		LightingPassInfo() {};
		~LightingPassInfo() {};

		std::string				Pname;
		std::string				Mname;

		std::function<void(Microsoft::WRL::ComPtr<ID3D12GraphicsCommandList>,
			resource::RenderResourceManager,
			Microsoft::WRL::ComPtr<ID3D12Device>)>				Lamda;

		bool					isGraphics;
			//		Compute
		//			IN				OUT:UAV
		std::unordered_map<resource::Buffer::ResourceInfoUsage, ResourceInfo>								ResourceInofs;

	};


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class MaterialPassInfo : public Pass_Mat_Info
	{
	public:
		MaterialPassInfo() {};
		~MaterialPassInfo() {};
	public:
		std::string				Pname;//	Pass
		std::string				Mname;//	Material

		bool					isGraphics;

		std::function<void(Microsoft::WRL::ComPtr<ID3D12GraphicsCommandList>,
			resource::RenderResourceManager,
			Microsoft::WRL::ComPtr<ID3D12Device>)>							Lamda;

		//	Setting?
		
		//			PSO
		PSO						PSO;
		//  Input		Data		&		Attribute   : 
		std::unordered_map<resource::Buffer::ResourceInfoUsage, ResourceInfo>								ResourceInofs;
		//	Output		Buffer		Attribute:	Name , Type , Format , Size , ............
		
		//	Queue Type
	};
}